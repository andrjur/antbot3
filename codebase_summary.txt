
# Пользовательский фильтр для проверки ID группы
class IsCourseGroupFilter(BaseFilter):
async def __call__(self, message: Message) -> bool:

@dp.message(IsCourseGroupFilter())
@db_exception_handler # Обработчик новых сообщений в группах курсов
async def handle_group_message(message: Message):


@dp.message(Command("edit_code"), F.chat.id == ADMIN_GROUP_ID)
async def edit_code(message: types.Message):


@dp.message(Command("adm_message_user"), F.chat.id == ADMIN_GROUP_ID)
async def adm_message_user(message: Message):

@dp.message(Command("adm_approve_course"), F.chat.id == ADMIN_GROUP_ID)
@db_exception_handler  # Админ-команда для одобрения курса
async def approve_course(message: Message):


@dp.callback_query(F.chat.id == ADMIN_GROUP_ID,lambda c: c.data in ["export_db", "import_db"])
async def handle_admin_actions(callback: CallbackQuery):

@dp.message(Command("export_db"), F.chat.id == ADMIN_GROUP_ID)
@db_exception_handler
async def export_db(message: types.Message):  # types.Message instead of Message

@dp.message(Command("import_db"), F.chat.id == ADMIN_GROUP_ID)
@db_exception_handler
async def import_db(message: types.Message):  # types.Message instead of Message

@dp.callback_query(F.chat.id == ADMIN_GROUP_ID,lambda c: c.data.startswith("approve_hw:") or c.data.startswith("reject_hw:"))
@db_exception_handler
async def handle_homework_decision(callback_query: CallbackQuery):


@dp.message(F.reply_to_message, F.chat.id == ADMIN_GROUP_ID)
async def handle_support_reply(message: types.Message):


@dp.message(Command("add_course"), F.chat.id == ADMIN_GROUP_ID)
async def cmd_add_course(message: types.Message):



async def update_settings_file():


@dp.message(F.chat.id == ADMIN_GROUP_ID, Command("admin"))
async def admin_panel(message: types.Message):


@dp.callback_query(F.chat.id == ADMIN_GROUP_ID,F.data == "admin_view_courses")
async def admin_view_courses(query: types.CallbackQuery):


@dp.callback_query(F.chat.id == ADMIN_GROUP_ID, lambda c: c.data.startswith("admin_edit_course:"))
async def admin_edit_course(query: types.CallbackQuery):


@dp.callback_query(F.chat.id == ADMIN_GROUP_ID,lambda c: c.data.startswith("admin_edit_lesson:"))
async def admin_edit_lesson(query: types.CallbackQuery):


@dp.callback_query(F.chat.id == ADMIN_GROUP_ID,lambda c: c.data.startswith("admin_add_lesson:"))
async def admin_add_lesson(query: types.CallbackQuery):


@dp.callback_query(F.chat.id == ADMIN_GROUP_ID,lambda c: c.data.startswith("admin_edit_tags:"))
async def admin_edit_tags(query: types.CallbackQuery):


@dp.callback_query(F.chat.id == ADMIN_GROUP_ID,lambda c: c.data.startswith("admin_delete_lesson:"))
async def admin_delete_lesson(query: types.CallbackQuery):

@dp.message(F.text, F.chat.id == ADMIN_GROUP_ID)
@db_exception_handler
async def process_rejection_reason(message: Message):


@db_exception_handler
async def get_user_tariff_from_db(user_id: int) -> str:


@db_exception_handler
async def check_homework_pending(user_id: int, course_id: str, lesson_num: int) -> bool:

@dp.message(CommandStart())
@db_exception_handler
async def cmd_start(message: types.Message):



async def send_course_description(user_id: int, course_id: str):



def get_tariff_name(version_id: str) -> str:

# help
@dp.message(Command("help"))
async def cmd_help(message: Message):


@dp.callback_query(F.data == "menu_support")
async def cmd_support_callback(query: types.CallbackQuery):


@dp.callback_query(lambda c: c.data.startswith("support_eval:"))
async def process_support_evaluation(query: types.CallbackQuery):

# Активация курса по кодовому слову. Записывает пользователя на курс
@dp.message(Command("activate"))
async def cmd_activate(message: Message):

@dp.callback_query(F.data == "menu_mycourses") #08-04 Предоставляет кнопки для продолжения или повторного просмотра
@db_exception_handler  # Показывает список активных и завершенных курсов # Разделяет курсы на активные и завершенные
async def cmd_mycourses_callback(query: types.CallbackQuery):

@dp.message(Command("completed_courses"))  # Показывает список завершенных курсов # Реализует пагинацию уроков
@db_exception_handler  # Позволяет просматривать уроки с сниппетами
async def cmd_completed_courses(message: Message):

# 11-04
@dp.callback_query(CourseCallback.filter(F.action == "menu_cur"))
async def show_lesson_content(callback_query: types.CallbackQuery, callback_data: CourseCallback):

@dp.callback_query(F.data == "menu_progress")
@db_exception_handler # Обработчик для команды просмотра прогресса по всем курсам
async def cmd_progress_callback(query: types.CallbackQuery):

@dp.message(Command("homework"))
@db_exception_handler  # пользователь домашку сдаёт
async def cmd_homework(message: types.Message):

@dp.message(Command("select_course"))
@db_exception_handler
async def select_course(message: Message):

@dp.callback_query(lambda c: c.data.startswith("submit_homework:"))
@db_exception_handler  # обработка отправки ДЗ
async def submit_homework_callback(callback_query: CallbackQuery, course_id, lesson_num):

@dp.callback_query(lambda c: c.data.startswith("review_prev:") or c.data.startswith("review_next:"))
@db_exception_handler  # пользователь просто лазит по урокам в свободном режиме
async def review_navigation_callback(callback_query: CallbackQuery):

@dp.callback_query(lambda c: c.data.startswith("review_lesson:"))
@db_exception_handler  # пользователь пользователь хочет просмотреть определенный урок
async def review_lesson_callback(callback_query: CallbackQuery):

@dp.callback_query(lambda c: c.data.startswith("view_completed_course:"))
@db_exception_handler
async def view_completed_course(callback_query: CallbackQuery):

@dp.callback_query(lambda c: c.data.startswith("view_completed_lesson:"))
@db_exception_handler
async def view_completed_lesson(callback_query: CallbackQuery):

@dp.callback_query(lambda c: c.data.startswith("show_full_lesson:"))
@db_exception_handler
async def show_full_lesson(callback_query: CallbackQuery):

@dp.callback_query(lambda c: c.data.startswith("review_course:"))
@db_exception_handler
async def review_course_callback(callback_query: CallbackQuery):

@dp.message(lambda message: message.text and message.text.lower() in settings["activation_codes"])
@db_exception_handler
async def activate_course(message: types.Message):

@dp.message(F.content_type.in_({'photo', 'document'}))
@db_exception_handler
async def handle_homework(message: types.Message):

@dp.message(F.text)
@db_exception_handler
async def handle_text(message: types.Message):



async def handle_text_homework(message: types.Message):

# Обработчик последний - чтобы не мешал другим обработчикам работать. Порядок имеет значение
@dp.message(F.text)  # Фильтр только для текстовых сообщений
async def handle_activation_code(message: types.Message): # handle_activation_code process_message


@dp.message(F.photo)
async def handle_photo(message: types.Message):


@dp.message(F.video)
async def handle_video(message: types.Message):


@dp.message(F.document)
async def handle_document(message: types.Message):


@dp.message()
async def default_handler(message: types.Message):


@dp.callback_query()
async def default_callback_handler(query: types.CallbackQuery):



