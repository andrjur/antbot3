

# 14-04 todo –Ω–∞—Ñ–∏–≥–∞
async def get_all_courses_by_status(status='active'):


# 14-04 todo –Ω–∞—Ñ–∏–≥–∞
async def get_user_active_courses(user_id: int):


# 14-04 todo –Ω–∞—Ñ–∏–≥–∞
async def get_user_courses_count(user_id: int, status = 'active') -> int:


# 14-04 todo –Ω–∞—Ñ–∏–≥–∞
async def get_course_start_date(user_id: int, course_id: str):


# 14-04
async def is_course_active(user_id: int, course_id: str) -> bool:


# 14-04 todo –Ω–∞—Ñ–∏–≥–∞. use get_user_active_courses. get_user_active_courses and is_course_active
async def get_user_courses(user_id: int) -> list:


# course_numeric_id = await get_course_id_int(course_id)
async def get_course_id_int(course_id: str) -> int:


# course_id = get_course_id_str(course_numeric_id)
async def get_course_id_str(course_numeric_id: int) -> str:


# 14-04
async def get_course_title(course_id: str) -> str:


# 14-04
async def is_valid_activation_code(code: str) -> bool:


# 14-04
async def activate_course(user_id: int, activation_code: str):


# 14-04
async def deactivate_course(user_id: int, course_id: str):


@db_exception_handler
async def check_lesson_schedule(user_id: int, hours = 24, minutes = 0):

await bot.send_message(user_id, "üìõ –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ú—ã —É–∂–µ —á–∏–Ω–∏–º —Ä–æ–±–æ—Ç–∞!", parse_mode=None)

async def scheduled_lesson_check(user_id: int):

await asyncio.sleep(2 * 60)  # –ö–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã

async def send_admin_stats():

await asyncio.sleep(5 * 3600)  # –ö–∞–∂–¥—ã–µ 5 —á–∞—Å–æ–≤

async def gather_course_statistics():

)

async def start_lesson_schedule_task(user_id: int):

logger.info(f" 500 start_lesson_schedule_task –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

async def stop_lesson_schedule_task(user_id: int):



def save_settings(settings):


@db_exception_handler
async def process_add_course_to_db(course_id, group_id, code1, code2, code3):



async def backup_settings_file():


@db_exception_handler
async def init_db():


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ MarkdownV2
def escape_md(text):

# –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@db_exception_handler
async def log_user_activity(user_id, action, details=""):

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∞–ª–∏–∞—Å—É –∏–ª–∏ ID
@db_exception_handler
async def resolve_user_id(user_identifier):


@db_exception_handler
async def send_lesson_to_user(user_id: int, course_id: str, lesson_num: int):

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫—É—Ä—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@lru_cache(maxsize=100)
async def get_course_status(user_id: int) -> tuple | None:


@dp.message(Command("set_timezone"))
async def set_timezone(message: types.Message):



async def get_next_lesson_time(user_id: int, course_id: str) -> str:

@dp.callback_query(F.data == "menu_support")
@db_exception_handler
async def cmd_support_callback(query: types.CallbackQuery, state: FSMContext):

@dp.callback_query(F.data == "old_menu_support")
@db_exception_handler
async def old_cmd_support_callback(query: types.CallbackQuery, state: FSMContext):



def get_main_menu_inline_keyboard(


@db_exception_handler
async def save_message_to_db(group_id: int, message: Message):


@db_exception_handler
async def test_and_send_random_lesson(course_id: str, conn: aiosqlite.Connection):


@db_exception_handler # –∫–∞–∫ –∫—É—Ä—Å –∑–∞–∫–æ–Ω—á–µ–Ω - –ø–æ–¥–≤–µ–¥—ë–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º *COURSE_END ‚Äî –∫–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç
async def process_course_completion(group_id: int, conn: aiosqlite.Connection):



def extract_course_snippet(text: str) -> str:



def extract_course_title(text: str) -> str:


@db_exception_handler
async def import_settings_to_db():


# 14-04 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö
async def check_groups_access(bot: Bot, raw_id: int, gr_name:str):



async def send_startup_message(bot: Bot, admin_group_id: int):

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ID –≥—Ä—É–ø–ø—ã
class IsCourseGroupFilter(BaseFilter):
async def __call__(self, message: Message) -> bool:

@dp.message(IsCourseGroupFilter())
@db_exception_handler # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö –∫—É—Ä—Å–æ–≤
async def handle_group_message(message: Message):


@dp.callback_query(F.chat.id == ADMIN_GROUP_ID,lambda c: c.data in ["export_db", "import_db"])
async def handle_admin_actions(callback: CallbackQuery):

@dp.message(Command("export_db"), F.chat.id == ADMIN_GROUP_ID)
@db_exception_handler
async def export_db(message: types.Message):  # types.Message instead of Message

@dp.message(Command("import_db"), F.chat.id == ADMIN_GROUP_ID)
@db_exception_handler
async def import_db(message: types.Message):  # types.Message instead of Message



async def update_settings_file():


@dp.message(Command("timezone"))
async def cmd_set_timezone(message: types.Message):


@dp.message(F.text == "‚å®Ô∏è –í—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é")
async def manual_timezone_selection(message: types.Message):


@dp.callback_query(lambda c: c.data.startswith("set_tz_manual:"))
async def process_manual_timezone(callback: types.CallbackQuery):


@dp.message(F.location)
async def handle_location(message: types.Message):

)

def is_valid_timezone(tz: str) -> bool:


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
async def get_local_time(user_id: int) -> datetime:


@db_exception_handler
async def check_homework_pending(user_id: int, course_id: str, lesson_num: int) -> bool:


@dp.callback_query(F.data.startswith("support_eval:"))
async def process_support_evaluation(callback: types.CallbackQuery):



async def check_state(message: types.Message, state: FSMContext) -> bool:

# –¥–æ–±–∞–≤–ª–µ–Ω–æ 24-04
@dp.message(SupportRequest.waiting_for_response, F.chat.type == "private")
async def process_support_response(message: types.Message, state: FSMContext):

@dp.message(CommandStart())
@db_exception_handler
async def cmd_start(message: types.Message):



async def send_course_description(user_id: int, course_id: str):

# help
@dp.message(Command("help"))
async def cmd_help(message: Message):

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def escape_markdown_v2(text: str) -> str:

return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', str(text))

def get_lesson_plural(n):

return "—É—Ä–æ–∫–æ–≤"

def get_course_plural(n):

@dp.callback_query(F.data == "menu_mycourses")  # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
@db_exception_handler  # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
async def cmd_mycourses_callback(query: types.CallbackQuery):

@dp.callback_query(CourseCallback.filter(F.action == "menu_cur"))
@db_exception_handler
async def show_lesson_content(callback_query: types.CallbackQuery, callback_data: CourseCallback):


# –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è courses.id:int, user_courses.current_lesson, user_courses.version_id
async def get_user_course_data(user_id: int) -> tuple:

@dp.callback_query(F.data == "menu_progress")
@db_exception_handler # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –≤—Å–µ–º –∫—É—Ä—Å–∞–º
async def cmd_progress_callback(query: types.CallbackQuery):

@dp.callback_query(CourseCallback.filter(F.action == "self_approve_hw"))
@db_exception_handler
async def process_self_approve_hw(callback: types.CallbackQuery, callback_data: CourseCallback):


@dp.callback_query(ReplySupportCallback.filter())
async def reply_support_callback(callback: types.CallbackQuery, callback_data: ReplySupportCallback, state: FSMContext):

#======================–ö–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–ª–æ–≤ –∏ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –∫–Ω–æ–ø–æ–∫=========================================

async def check_state(message: types.Message, state: FSMContext) -> bool:

# –ù–ê–î–û 17-04
@db_exception_handler
async def update_homework_status(user_id: int, course_id: str, lesson_num: int, status: str):


# 16-04 –Ω–æ—á–µ—Ä —Å–¥–µ–ª–∞–µ–º –∫–ª–∞–≤—É –æ—Ç–¥–µ–ª—å–Ω–æ
def create_admin_keyboard(user_id: int, course_id: int, lesson_num: int, message_id: int) -> InlineKeyboardMarkup:



async def send_message_to_user(user_id: int, text: str, reply_markup: InlineKeyboardMarkup = None):



def get_tariff_name(version_id: str) -> str:

# –ù–ê–î–û 18-04
@dp.callback_query(AdminHomeworkCallback.filter(F.action.in_(["approve_hw", "reject_hw", "approve_reason", "reject_reason"])))
async def process_homework_action(callback_query: types.CallbackQuery, callback_data: AdminHomeworkCallback, state: FSMContext):

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
@dp.callback_query(F.data == "menu_feedback")
async def cmd_feedback(query: types.CallbackQuery, state: FSMContext):


@dp.message(Form.feedback)
async def process_feedback(message: types.Message, state: FSMContext):


# –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ process_feedback - –≤–≤–µ—Ä—Ö—É —Ñ—É–Ω–∫—Ü–∏—è
async def handle_homework_result(user_id: int, course_id: str, course_numeric_id: int, lesson_num: int, admin_id: int, feedback_text: str, is_approved: bool, callback_query: types.CallbackQuery):



async def get_user_name(user_id: int) -> str:

@dp.message(F.chat.id == ADMIN_GROUP_ID, SupportRequest.waiting_for_response)
@db_exception_handler
async def admin_response_handler(message: types.Message, state: FSMContext):


@dp.message(SupportRequest.waiting_for_message)
async def handle_support_message(message: types.Message, state: FSMContext):

@dp.message(F.text, check_state)
@db_exception_handler
async def handle_text(message: types.Message, state: FSMContext):

# —Å–º–∞–π–ª–∏–∫–∏ –∏–∑ "–ø–æ–¥–¥–µ—Ä–∂–∫–∏" –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(F.data.startswith("support_eval:"))
async def process_support_evaluation(callback: types.CallbackQuery):


# --- Database Retry Utility ---
async def safe_db_execute(conn, query, params=None, retries=MAX_DB_RETRIES, delay=DB_RETRY_DELAY):

@dp.message(F.content_type.in_({'photo', 'document', 'text'}), F.chat.type == "private")
@db_exception_handler
async def handle_homework(message: types.Message):

logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–º–∞—à–∫–∏ –∞–¥–º–∏–Ω–∞–º: {e}", exc_info=True)

async def send_main_menu(user_id: int, course_id: str, lesson_num: int, version_id: str,

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π - —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª –¥—Ä—É–≥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º —Ä–∞–±–æ—Ç–∞—Ç—å. –ü–æ—Ä—è–¥–æ–∫ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
@dp.message(F.text)  # –§–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_activation_code(message: types.Message): # handle_activation_code process_message

#  –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(F.photo | F.video | F.document | F.text)
async def handle_user_content(message: types.Message):


@dp.message(F.photo)
async def handle_photo(message: types.Message):


@dp.message(F.video)
async def handle_video(message: types.Message):


@dp.message(F.document)
async def handle_document(message: types.Message):


@dp.message()
async def default_handler(message: types.Message):


@dp.callback_query()
async def default_callback_handler(query: types.CallbackQuery):



async def main():

