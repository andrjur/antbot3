
# Database initialization
@db_exception_handler
async def old_init_db():


@db_exception_handler
async def init_db():


# Функция для экранирования спецсимволов в тексте для использования в MarkdownV2
def escape_md(text):

# логирование действий пользователя
@db_exception_handler
async def log_user_activity(user_id, action, details=""):

# функция для разрешения ID пользователя по алиасу или ID
@db_exception_handler
async def resolve_user_id(user_identifier):

# Отправка урока пользователю
@db_exception_handler
async def send_lesson_to_user(user_id, course_id, lesson_num):

# функция для кэширования статуса курса пользователя
@lru_cache(maxsize=100)
async def get_course_status(user_id: int) -> tuple | None:

# фоновая задача для проверки и отправки уведомлений о новых уроках.
@db_exception_handler
async def old_check_and_schedule_lessons():



async def get_courses_list():


#"Показывает статус курса с маппингом тарифов
async def show_course_status(message: types.Message, course_data: tuple, keyboard: types.InlineKeyboardMarkup):



def generate_progress_bar(percent, length=10):

# обработка содержимого ДЗ
@db_exception_handler
async def process_homework_submission(message: Message):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def get_admin_keyboard():



def get_main_menu_keyboard():



def get_main_menu_inline_keyboard():


# todo убрали send_startup_message
async def old_send_startup_message(bot: Bot, admin_group_id: int):


# проверим канал на доступ todo: сделать паузу если каналов много чтоб не банили. или запускать на оч тормозном компе
async def check_group_access(bot: Bot, raw_id: str, course_name: str):

# ============= для взаимодействия с группами уроков. работает при добавлении материала в группу ===========
# Функция для сохранения сообщений в базу данных
async def old_save_message_to_db(channel_id: int, message: Message):



async def save_message_to_db(channel_id: int, message: Message):


# как курс закончен - подведём статистику и отправляем админам *COURSE_END — когда приходит
async def process_course_completion(channel_id: int, conn: aiosqlite.Connection):



def extract_course_snippet(text: str) -> str:



def extract_course_title(text: str) -> str:



async def import_settings_to_db():



async def check_groups_access(bot: Bot, raw_id: str, gr_name: str):



async def send_startup_message(bot: Bot, admin_group_id: int):



async def send_lesson_messages(channel_id: int, messages: list):

# Пользовательский фильтр для проверки ID группы
class IsCourseGroupFilter(BaseFilter):
async def __call__(self, message: Message) -> bool:

@dp.message(IsCourseGroupFilter())
@db_exception_handler # Обработчик новых сообщений в группах курсов
async def handle_group_message(message: Message):


@dp.message(Command("edit_code"), F.chat.id == ADMIN_GROUP_ID)
async def edit_code(message: types.Message):


@dp.message(Command("adm_message_user"), F.chat.id == ADMIN_GROUP_ID)
async def adm_message_user(message: Message):

@dp.message(Command("adm_approve_course"), F.chat.id == ADMIN_GROUP_ID)
@db_exception_handler  # Админ-команда для одобрения курса
async def approve_course(message: Message):


@dp.callback_query(lambda c: c.data in ["export_db", "import_db"])
async def handle_admin_actions(callback: CallbackQuery):

@dp.message(Command("export_db"), F.chat.id == ADMIN_GROUP_ID)
@db_exception_handler
async def export_db(message: types.Message):  # types.Message instead of Message

@dp.message(Command("import_db"), F.chat.id == ADMIN_GROUP_ID)
@db_exception_handler
async def import_db(message: types.Message):  # types.Message instead of Message

@dp.message(F.text, F.chat.id == ADMIN_GROUP_ID)
@db_exception_handler
async def process_rejection_reason(message: Message):

@dp.callback_query(lambda c: c.data.startswith("approve_hw:") or c.data.startswith("reject_hw:"))
@db_exception_handler
async def handle_homework_decision(callback_query: CallbackQuery):


@dp.message(Command("admin"))
async def admin_panel(message: types.Message):


@dp.callback_query(F.data == "admin_view_courses")
async def admin_view_courses(query: types.CallbackQuery):


@dp.callback_query(lambda c: c.data.startswith("admin_edit_course:"))
async def admin_edit_course(query: types.CallbackQuery):


@dp.callback_query(lambda c: c.data.startswith("admin_edit_lesson:"))
async def admin_edit_lesson(query: types.CallbackQuery):


@dp.callback_query(lambda c: c.data.startswith("admin_add_lesson:"))
async def admin_add_lesson(query: types.CallbackQuery):


@dp.callback_query(lambda c: c.data.startswith("admin_edit_tags:"))
async def admin_edit_tags(query: types.CallbackQuery):


@dp.callback_query(lambda c: c.data.startswith("admin_delete_lesson:"))
async def admin_delete_lesson(query: types.CallbackQuery):

@dp.message(CommandStart())
@db_exception_handler  # /start - начало общения пользователя и бота
async def cmd_start(message: types.Message):

# help
@dp.message(Command("help"))
async def cmd_help(message: Message):

# Создает тикет в службу поддержки # Пересылает сообщение администраторам
@dp.message(Command("support"))
async def cmd_support(message: Message):

# Активация курса по кодовому слову. Записывает пользователя на курс
@dp.message(Command("activate"))
async def cmd_activate(message: Message):

@dp.message(Command("mycourses"))
@db_exception_handler  # todo потестить
async def old_cmd_mycourses(message: Message):

@dp.message(Command("mycourses"))  # Предоставляет кнопки для продолжения или повторного просмотра
@db_exception_handler  # Показывает список активных и завершенных курсов # Разделяет курсы на активные и завершенные
async def cmd_mycourses(message: Message):

@dp.message(Command("completed_courses"))  # Показывает список завершенных курсов # Реализует пагинацию уроков
@db_exception_handler  # Позволяет просматривать уроки с сниппетами
async def cmd_completed_courses(message: Message):


@dp.callback_query(lambda c: c.data.startswith("current_lesson:"))
async def current_lesson(query: types.CallbackQuery):

#@dp.message(Command("lesson"))
@db_exception_handler
async def old_cmd_lesson(message: types.Message):


@db_exception_handler
async def older_cmd_lesson(message: Message):

@dp.message(Command("progress"))
@db_exception_handler  # Обработчик для команды просмотра прогресса по всем курсам
async def cmd_progress(message: Message):

@dp.message(Command("homework"))
@db_exception_handler  # пользователь домашку сдаёт
async def cmd_homework(message: types.Message):

@dp.message(Command("select_course"))
@db_exception_handler
async def select_course(message: Message):

@dp.callback_query(lambda c: c.data.startswith("start_lesson:"))
@db_exception_handler  # функция для отправки урока пользователю
async def start_lesson_callback(callback: CallbackQuery):

@dp.callback_query(lambda c: c.data.startswith("lesson_complete:"))
@db_exception_handler  # # Обрабатывает нажатие "Урок изучен" Обработчик для колбэков от кнопок Проверяет необходимость домашнего задания
async def complete_lesson_callback(callback_query: CallbackQuery, course_id, lesson_num):

@dp.callback_query(lambda c: c.data.startswith("submit_homework:"))
@db_exception_handler  # обработка отправки ДЗ
async def submit_homework_callback(callback_query: CallbackQuery, course_id, lesson_num):

@dp.callback_query(F.data == "menu_current_lesson")
@db_exception_handler
async def process_current_lesson(callback: CallbackQuery):

@dp.callback_query(lambda c: c.data.startswith("review_prev:") or c.data.startswith("review_next:"))
@db_exception_handler  # пользователь просто лазит по урокам в свободном режиме
async def review_navigation_callback(callback_query: CallbackQuery):

@dp.callback_query(lambda c: c.data.startswith("review_lesson:"))
@db_exception_handler  # пользователь пользователь хочет просмотреть определенный урок
async def review_lesson_callback(callback_query: CallbackQuery):

@dp.callback_query(lambda c: c.data.startswith("view_completed_course:"))
@db_exception_handler
async def view_completed_course(callback_query: CallbackQuery):

@dp.callback_query(lambda c: c.data.startswith("view_completed_lesson:"))
@db_exception_handler
async def view_completed_lesson(callback_query: CallbackQuery):

@dp.callback_query(lambda c: c.data.startswith("show_full_lesson:"))
@db_exception_handler
async def show_full_lesson(callback_query: CallbackQuery):

@dp.callback_query(lambda c: c.data.startswith("review_course:"))
@db_exception_handler
async def review_course_callback(callback_query: CallbackQuery):

@dp.message(lambda message: message.text.lower() in settings["activation_codes"])
@db_exception_handler
async def activate_course(message: types.Message):


@db_exception_handler
async def activate_course(user_id, course_id, course_type, price_rub):

# Обработчик последний - чтобы не мешал другим обработчикам работать. Порядок имеет значение
@dp.message(F.text)  # Фильтр только для текстовых сообщений
async def process_message(message: types.Message):


# Запуск бота
async def main():

