
@dp.message(CommandStart())
@db_exception_handler
async def cmd_start(message: types.Message):


async def send_course_description(user_id: int, course_id: str):

ef get_tariff_name(version_id: str) -> str:

# help
@dp.message(Command("help"))
async def cmd_help(message: Message):


@dp.callback_query(F.data == "menu_support")
async def cmd_support_callback(query: types.CallbackQuery):


@dp.callback_query(lambda c: c.data.startswith("support_eval:"))
async def process_support_evaluation(query: types.CallbackQuery):

# Активация курса по кодовому слову. Записывает пользователя на курс
@dp.message(Command("activate"))
async def cmd_activate(message: Message):

@dp.callback_query(F.data == "menu_mycourses") #08-04 Предоставляет кнопки для продолжения или повторного просмотра
@db_exception_handler  # Показывает список активных и завершенных курсов # Разделяет курсы на активные и завершенные
async def cmd_mycourses_callback(query: types.CallbackQuery):

@dp.message(Command("completed_courses"))  # Показывает список завершенных курсов # Реализует пагинацию уроков
@db_exception_handler  # Позволяет просматривать уроки с сниппетами
async def cmd_completed_courses(message: Message):

# 11-04
@dp.callback_query(CourseCallback.filter(F.action == "menu_cur"))
async def show_lesson_content(callback_query: types.CallbackQuery, callback_data: CourseCallback):


# данные о курсе пользователя courses.id:int, user_courses.current_lesson, user_courses.version_id
async def get_user_course_data(user_id: int) -> tuple:

@dp.callback_query(F.data == "menu_progress")
@db_exception_handler # Обработчик для команды просмотра прогресса по всем курсам
async def cmd_progress_callback(query: types.CallbackQuery):

@dp.message(Command("homework"))
@db_exception_handler  # пользователь домашку сдаёт
async def cmd_homework(message: types.Message):

@dp.message(Command("select_course"))
@db_exception_handler
async def select_course(message: Message):

@dp.callback_query(lambda c: c.data.startswith("submit_homework:"))
@db_exception_handler  # обработка отправки ДЗ
async def submit_homework_callback(callback_query: CallbackQuery, course_id, lesson_num):

@dp.callback_query(CourseCallback.filter(F.action == "self_approve_hw"))
@db_exception_handler
async def process_self_approve_hw(callback: types.CallbackQuery, callback_data: CourseCallback):

@dp.callback_query(lambda c: c.data.startswith("review_prev:") or c.data.startswith("review_next:"))
@db_exception_handler  # пользователь просто лазит по урокам в свободном режиме
async def review_navigation_callback(callback_query: CallbackQuery):

@dp.callback_query(lambda c: c.data.startswith("review_lesson:"))
@db_exception_handler  # пользователь пользователь хочет просмотреть определенный урок
async def review_lesson_callback(callback_query: CallbackQuery):

@dp.callback_query(lambda c: c.data.startswith("view_completed_course:"))
@db_exception_handler
async def view_completed_course(callback_query: CallbackQuery):

@dp.callback_query(lambda c: c.data.startswith("view_completed_lesson:"))
@db_exception_handler
async def view_completed_lesson(callback_query: CallbackQuery):

@dp.callback_query(lambda c: c.data.startswith("show_full_lesson:"))
@db_exception_handler
async def show_full_lesson(callback_query: CallbackQuery):

@dp.callback_query(lambda c: c.data.startswith("review_course:"))
@db_exception_handler
async def review_course_callback(callback_query: CallbackQuery):

@dp.message(lambda message: message.text and message.text.lower() in settings["activation_codes"])
@db_exception_handler
async def activate_course(message: types.Message):

@dp.message(F.content_type.in_({'photo', 'document'}))
@db_exception_handler
async def old_handle_homework(message: types.Message):

#======================Конец обработчиков слов и хэндлеров кнопок=========================================

async def check_state(message: types.Message, state: FSMContext) -> bool:

@dp.message(F.text, check_state)
@db_exception_handler
async def handle_text(message: types.Message, state: FSMContext):

@dp.message(F.content_type.in_({'photo', 'document', 'text'}))
@db_exception_handler
async def handle_homework(message: types.Message):

# НАДО 17-04
@db_exception_handler
async def update_homework_status(user_id: int, course_id: str, lesson_num: int, status: str):


# 16-04 ночер сделаем клаву отдельно
def create_admin_keyboard(user_id: int, course_id: int, lesson_num: int, message_id: int) -> InlineKeyboardMarkup:

# 14-04
@dp.message(F.text, IsAdmin())
async def handle_text_homework(message: types.Message):



async def get_admin_homework_data(user_id: int) -> tuple:



async def send_message_to_user(user_id: int, text: str, reply_markup: InlineKeyboardMarkup = None):

# НАДО 17-04
@dp.callback_query(AdminHomeworkCallback.filter(F.action == "approve_hw"))
async def approve_homework(callback_query: types.CallbackQuery, callback_data: AdminHomeworkCallback):

# НАДО 17-04
@dp.callback_query(AdminHomeworkCallback.filter(F.action == "reject_hw"))
async def reject_homework(callback_query: types.CallbackQuery, callback_data: AdminHomeworkCallback):


@dp.callback_query(ApproveFinalCallback.filter())
async def approve_final(callback_query: types.CallbackQuery, callback_data: ApproveFinalCallback):


@dp.callback_query(RejectFinalCallback.filter())
async def reject_final(callback_query: types.CallbackQuery, callback_data: RejectFinalCallback):


@dp.callback_query(ApproveWithFeedbackCallback.filter())
async def approve_with_feedback(callback_query: types.CallbackQuery, callback_data: ApproveWithFeedbackCallback, state: FSMContext):


@dp.callback_query(RejectWithFeedbackCallback.filter())
async def reject_with_feedback(callback_query: types.CallbackQuery, callback_data: RejectWithFeedbackCallback, state: FSMContext):

# Обработчик получения текста причины отказа и завершения процесса
@dp.message(Form.feedback)
async def process_rejection_feedback(message: types.Message, state: FSMContext):

# Обработчик последний - чтобы не мешал другим обработчикам работать. Порядок имеет значение
@dp.message(F.text)  # Фильтр только для текстовых сообщений
async def handle_activation_code(message: types.Message): # handle_activation_code process_message

#  Обработчик входящего контента от пользователя
@dp.message(F.photo | F.video | F.document | F.text)
async def handle_user_content(message: types.Message):


@dp.message(F.photo)
async def handle_photo(message: types.Message):
